{"version":3,"sources":["components/PostAuthor.tsx","components/CommentItem.tsx","components/CommentList.tsx","components/PostItem.tsx","components/PostList.tsx","components/PostFilter.tsx","components/PostsBlock.tsx","api/fetchData.ts","App.tsx","api/urls.ts","index.tsx"],"names":["PostAuthor","name","email","address","className","city","street","suite","CommentItem","body","CommentList","comments","length","map","comment","key","id","PostItem","title","author","PostList","posts","post","PostFilter","initialPosts","setPosts","useState","query","setQuery","setPostsWithDebounce","useCallback","debounce","value","pattern","RegExp","filter","test","getFilteredPosts","htmlFor","type","placeholder","onChange","event","currentTarget","PostsBlock","fetchData","url","a","fetch","response","json","App","postsExtended","setPostsExtended","isLoading","setLoading","hasError","setError","loadData","Promise","all","users","preparedPosts","userId","find","user","postId","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eaeca5c6.chunk.js","sourcesContent":["import React from 'react';\nimport { User } from '../interfaces/data';\n\nexport const PostAuthor: React.FC<User> = ({ name, email, address }) => {\n  return (\n    <div className=\"post__author\">\n      <p>{name}</p>\n      <p>{email}</p>\n      <p>\n        {`${address.city}, ${address.street} st., ${address.suite}`}\n      </p>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Comment } from '../interfaces/data';\n\nexport const CommentItem: React.FC<Comment> = ({ name, body, email }) => (\n  <section className=\"comment\">\n    <h3 className=\"comment__title\">{name}</h3>\n    <span className=\"comment__email\">{email}</span>\n    <p className=\"comment__body\">{body}</p>\n  </section>\n);\n","import React from 'react';\nimport { Comment } from '../interfaces/data';\nimport { CommentItem } from './CommentItem';\n\ninterface Props {\n  comments: Comment[];\n}\n\nexport const CommentList: React.FC<Props> = ({ comments }) => {\n  return (\n    <>\n      <p className=\"post__comments-num\">\n        Comments (\n        {comments.length}\n        ):\n      </p>\n      <ul className=\"post__comments\">\n        {comments.map(comment => (\n          <li key={comment.id}>\n            <CommentItem {...comment} />\n          </li>\n        ))}\n      </ul>\n    </>\n  );\n};\n","import React from 'react';\nimport { PostExtended } from '../interfaces/data';\nimport { PostAuthor } from './PostAuthor';\nimport { CommentList } from './CommentList';\n\nexport const PostItem: React.FC<PostExtended> = ({\n  title,\n  body,\n  author,\n  comments,\n}) => {\n  return (\n    <section className=\"post\">\n      <h2 className=\"post__title\">{title}</h2>\n      <p className=\"post__body\">{body}</p>\n      <PostAuthor {...author} />\n      <CommentList comments={comments} />\n    </section>\n  );\n};\n","import React from 'react';\nimport { PostItem } from './PostItem';\nimport { PostExtended } from '../interfaces/data';\n\ninterface Props {\n  posts: PostExtended[];\n}\n\nexport const PostList: React.FC<Props> = ({ posts }) => {\n  return (\n    <ul>\n      {posts.map(post => (\n        <li key={post.id}>\n          <PostItem {...post} />\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useState, useCallback } from 'react';\nimport debounce from 'lodash.debounce';\nimport { PostExtended } from '../interfaces/data';\n\ninterface Props {\n  initialPosts: PostExtended[];\n  setPosts(posts: PostExtended[]): void;\n}\n\nexport const PostFilter: React.FC<Props> = ({ initialPosts, setPosts }) => {\n  const [query, setQuery] = useState('');\n\n  const getFilteredPosts = (posts: PostExtended[], value: string) => {\n    const pattern = new RegExp(value, 'i');\n\n    return posts.filter(({ title, body }) => {\n      return pattern.test(title) || pattern.test(body);\n    });\n  };\n\n  const setPostsWithDebounce = useCallback(\n    debounce((value: string) => {\n      setPosts(getFilteredPosts(initialPosts, value));\n    }, 1000),\n    [],\n  );\n\n  const filterPosts = (event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n\n    setQuery(value);\n    setPostsWithDebounce(value);\n  };\n\n  return (\n    <label className=\"filter\" htmlFor=\"filter\">\n      <input\n        id=\"filter\"\n        className=\"filter__input\"\n        type=\"text\"\n        value={query}\n        placeholder=\"Filter by title or content\"\n        onChange={filterPosts}\n      />\n    </label>\n  );\n};\n","import React, { useState } from 'react';\nimport { PostList } from './PostList';\nimport { PostFilter } from './PostFilter';\nimport { PostExtended } from '../interfaces/data';\n\ninterface Props {\n  initialPosts: PostExtended[];\n}\n\nexport const PostsBlock: React.FC<Props> = ({ initialPosts }) => {\n  const [posts, setPosts] = useState<PostExtended[]>(initialPosts);\n\n  return (\n    <div>\n      <PostFilter\n        initialPosts={initialPosts}\n        setPosts={setPosts}\n      />\n      <PostList posts={posts} />\n    </div>\n  );\n};\n","export const fetchData = async <T>(url: string): Promise<T[]> => {\n  const response = await fetch(url);\n\n  return response.json();\n};\n","import React, { useState } from 'react';\nimport './App.css';\nimport { PostsBlock } from './components/PostsBlock';\nimport { fetchData } from './api/fetchData';\nimport { API_URL_POSTS, API_URL_USERS, API_URL_COMMENTS } from './api/urls';\nimport {\n  Post, User, Comment, PostExtended,\n} from './interfaces/data';\n\nconst App: React.FC = () => {\n  const [postsExtended, setPostsExtended] = useState<PostExtended[]>([]);\n  const [isLoading, setLoading] = useState(false);\n  const [hasError, setError] = useState(false);\n\n  const loadData = async () => {\n    setError(false);\n    setLoading(true);\n\n    try {\n      const [posts, users, comments] = await Promise.all([\n        fetchData<Post>(API_URL_POSTS),\n        fetchData<User>(API_URL_USERS),\n        fetchData<Comment>(API_URL_COMMENTS),\n      ]);\n\n      const preparedPosts: PostExtended[] = posts.map(({\n        userId,\n        id,\n        title,\n        body,\n      }) => ({\n        id,\n        title,\n        body,\n        author: users.find(user => user.id === userId)!,\n        comments: comments.filter(({ postId }) => postId === id),\n      }));\n\n      setPostsExtended(preparedPosts);\n\n      setLoading(false);\n    } catch (e) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n\n  return (\n    <section className=\"task-wrap\">\n      <h1>Dynamic list of posts</h1>\n      {\n        postsExtended.length === 0\n          ? (\n            <button\n              className=\"init-btn\"\n              type=\"button\"\n              onClick={loadData}\n              disabled={isLoading}\n            >\n              {isLoading && 'Loading...'}\n              {hasError && 'Try again!'}\n              {!isLoading && !hasError && 'Load'}\n            </button>\n          )\n          : <PostsBlock initialPosts={postsExtended} />\n      }\n    </section>\n  );\n};\n\nexport default App;\n","export const API_URL_POSTS\n    = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/posts.json';\nexport const API_URL_USERS\n    = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/users.json';\nexport const API_URL_COMMENTS\n    = 'https://mate-academy.github.io/react_dynamic-list-of-posts/api/comments.json';\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}